Description: >
  Ahamed Mohammed Hussain Capstone Project for Udacity Cloud DevOps Nanodegree

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String

  VpcCIDR:
    Description: VPC IP
    Type: String
    Default: 10.1.0.0/16

  PublicSubnet1CIDR:
    Description: IP for the public subnet in the first Availability Zone
    Type: String
    Default: 10.1.0.0/24

  PublicSubnet2CIDR:
    Description: IP for the public subnet in the second Availability Zone
    Type: String
    Default: 10.1.1.0/24

  InstanceType:
    Default: t3.medium
    Description: EC2 instance for the node instances.
    Type: String


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRoutes
        - Key: Network
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet (AZ2)

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for cluster
      VpcId: !Ref VPC

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: !Sub ${EnvironmentName}-RoleName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Path: /

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: KubsCluster
      RoleArn:
        "Fn::GetAtt": ["EKSClusterRole", "Arn"]
      ResourcesVpcConfig:
        SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal:
                Service:
                -  ec2.amazonaws.com
            Action:
            -  "sts:AssumeRole"
      ManagedPolicyArns:
      -  "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      -  "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      -  "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref NodeRole

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: KubsCluster
      NodeRole: !GetAtt NodeRole.Arn
      InstanceTypes:
        -  !Ref InstanceType
      RemoteAccess:
        Ec2SshKey: eks-pair-east1
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      ScalingConfig:
        DesiredSize: 1
        MinSize: 1
        MaxSize: 1



  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to EC2 and SSH access
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

  JenkinsEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              sudo apt-get update -y
              sudo apt-get install default-jdk wget -y
              cd /home/ubuntu
              wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
              sudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
              sudo apt-get update -y
              sudo apt-get install jenkins tidy -y
              sudo systemctl status jenkins
        SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
        SubnetId: !Ref PublicSubnet1
        ImageId: ami-0ac80df6eff0e70b5 
        IamInstanceProfile: !Ref NodeInstanceProfile
        InstanceType: !Ref InstanceType
        KeyName: eks-pair-east1

